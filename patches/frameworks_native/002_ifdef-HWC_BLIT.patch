From eb0c4e3eee8a4ecc7df23eb5813c684e6b40f01f Mon Sep 17 00:00:00 2001
From: Andrew Sutherland <dr3wsuth3rland@gmail.com>
Date: Wed, 1 Jan 2014 14:59:59 -0600
Subject: [PATCH] ifdef HWC_BLIT

Change-Id: If67c8ae70fadb1309990336ae97fb7da2dd62c7d

Conflicts:
	services/surfaceflinger/DisplayHardware/HWComposer.cpp
	services/surfaceflinger/Layer.cpp
	services/surfaceflinger/SurfaceFlinger.cpp
---
 services/surfaceflinger/DisplayHardware/HWComposer.cpp | 12 +++++++++++-
 services/surfaceflinger/Layer.cpp                      |  6 +++++-
 services/surfaceflinger/SurfaceFlinger.cpp             |  5 +++++
 3 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index f43fb0a..de31aca 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -758,6 +758,14 @@ status_t HWComposer::prepare() {
                     if (l.compositionType == HWC_FRAMEBUFFER) {
                         disp.hasFbComp = true;
                     }
+                    // If the composition type is BLIT, we set this to
+                    // trigger a FLIP
+#ifdef QCOM_BSP
+                    if(l.compositionType == HWC_BLIT) {
+                        disp.hasFbComp = true;
+                        disp.hasBlitComp = true;
+                    }
+#endif
                     if (l.compositionType == HWC_OVERLAY) {
                         disp.hasOvComp = true;
                     }
@@ -1305,8 +1313,10 @@ void HWComposer::dump(String8& result) const {
                             "HWC",
                             "BKGND",
                             "FB TARGET",
-                            "SIDEBAND",
                             "HWC_CURSOR",
+#ifdef QCOM_BSP
+                            "FB_BLIT",
+#endif
                             "UNKNOWN"};
                     if (type >= NELEM(compositionTypeName))
                         type = NELEM(compositionTypeName) - 1;
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 5324d8e..bf3b107 100755
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -676,7 +676,11 @@ void Layer::setAcquireFence(const sp<const DisplayDevice>& /* hw */,
     // TODO: there is a possible optimization here: we only need to set the
     // acquire fence the first time a new buffer is acquired on EACH display.
 
-    if (layer.getCompositionType() == HWC_OVERLAY || layer.getCompositionType() == HWC_CURSOR_OVERLAY) {
+    if (layer.getCompositionType() == HWC_OVERLAY || layer.getCompositionType() == HWC_CURSOR_OVERLAY
+#ifdef QCOM_BSP
+		    || layer.getCompositionType() == HWC_BLIT
+#endif
+	    ) {
         sp<Fence> fence = mSurfaceFlingerConsumer->getCurrentFence();
         if (fence->isValid()) {
             fenceFd = fence->dup();
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 70f88cf..fd32472 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -2337,6 +2337,11 @@ bool SurfaceFlinger::doComposeSurfaces(const sp<const DisplayDevice>& hw, const
                         layer->draw(hw, clip);
                         break;
                     }
+#ifdef QCOM_BSP
+                    case HWC_BLIT:
+                        //Do nothing
+                        break;
+#endif
                     case HWC_FRAMEBUFFER_TARGET: {
                         // this should not happen as the iterator shouldn't
                         // let us get there.

